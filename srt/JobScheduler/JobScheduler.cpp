#include "JobScheduler.h"

namespace srt
{
	// ============================================================================
	//
	// ============================================================================

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------
	void Semaphore::Acquire( )
	{
		std::unique_lock < std::mutex > lock( m_mutex );
		while( m_count == 0)
		{
			m_cv.wait( lock );
		}
		m_count--;	
	}

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------
	void Semaphore::Release( )
	{
		std::unique_lock < std::mutex > lock( m_mutex );
		m_count++;
		m_cv.notify_one();
	}

	// ============================================================================
	//
	// ============================================================================

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------
	void JobScheduler::ThreadFunc( JobScheduler * js )
	{
		while( js->m_exit==false )
		{
			js->m_sem.Acquire();
		
		}

		int goodBye = 0;
		printf( "GoodBye: %d", goodBye );
	}

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------
	JobScheduler::JobScheduler( const size_t threadCount )
	: m_threadCount{ threadCount }
	{
		for( size_t threadIdx = 0; threadIdx < m_threadCount; ++threadIdx )
		{
			m_threads.push_back( new std::thread( ThreadFunc, this ) );
		}
	}

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------
	JobScheduler::~JobScheduler( )
	{
		m_exit = true;

		for( auto it : m_threads )
		{
			m_sem.Release();
		}

		for( auto it : m_threads )
		{
			it->join( );
			delete it;
		}

	}

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------
	void JobScheduler::PushJob( )
	{
		m_sem.Release();
	}
}
